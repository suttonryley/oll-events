{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sutto\\\\Documents\\\\react_practice\\\\finished-oll-events\\\\oll-events\\\\oll-events\\\\src\\\\Table.js\";\nimport React from 'react';\nimport './Table.css';\nimport Rows from './Rows.js'; //NOTE: I was unable to figure out how to get the date to parse correctly,\n// so that is a bug, and it doesn't sort on date\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Table extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      artistError: null,\n      isArtistLoaded: false,\n      artistItems: [],\n      eventError: null,\n      isEventLoaded: false,\n      eventItems: [],\n      venueError: null,\n      isVenueLoaded: null,\n      venueItems: [],\n      optionSelected: null\n    };\n  } // This fetches the JSON data and builds the \n\n\n  componentDidMount() {\n    fetch(\"https://oll-coding-exercise.s3-us-west-2.amazonaws.com/artists.json\").then(res => res.json()).then(result => {\n      this.setState({\n        isArtistLoaded: true,\n        artistItems: result\n      });\n    }, error => {\n      this.setState({\n        isArtistLoaded: true,\n        artistError: error\n      });\n    });\n    fetch(\"https://oll-coding-exercise.s3-us-west-2.amazonaws.com/events.json\").then(res => res.json()).then(result => {\n      this.setState({\n        isEventLoaded: true,\n        eventItems: result\n      });\n    }, error => {\n      this.setState({\n        isEventLoaded: true,\n        eventError: error\n      });\n    });\n    fetch(\"https://oll-coding-exercise.s3-us-west-2.amazonaws.com/venues.json\").then(res => res.json()).then(result => {\n      this.setState({\n        isVenueLoaded: true,\n        venueItems: result\n      });\n    }, error => {\n      this.setState({\n        isVenueLoaded: true,\n        venueError: error\n      });\n    });\n  } // method keeps track of which radio button is selected\n\n\n  onRadioChange(event) {\n    this.setState({\n      optionSelected: event.target.value\n    });\n  }\n\n  render() {\n    // if an error occured output corresponding error\n    if (this.state.artistError || this.state.eventError || this.state.venueError) {\n      if (this.state.artistError) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Error: \", this.state.artistError.message]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 24\n        }, this);\n      } else if (this.state.eventError) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Error: \", this.state.eventError.message]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 24\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Error: \", this.state.venueError.message]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 24\n        }, this);\n      }\n    } // if one of the JSON files isn't loaded output loading message\n    else if (!this.state.isArtistLoaded || !this.state.isEventLoaded || !this.state.isVenueLoaded) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 20\n        }, this);\n      } // All files loaded, no errors processing normally\n      else {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"Table-Header\",\n            children: [\"Sort By:\", /*#__PURE__*/_jsxDEV(\"form\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"radio\",\n                children: /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"radio\",\n                    value: \"Artist\",\n                    name: \"sortRadio\",\n                    onChange: event => this.onRadioChange(event)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 113,\n                    columnNumber: 33\n                  }, this), \"Artist\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 112,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"radio\",\n                children: /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"radio\",\n                    value: \"Venue\",\n                    name: \"sortRadio\",\n                    onChange: event => this.onRadioChange(event)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 124,\n                    columnNumber: 33\n                  }, this), \"Venue\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 123,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Rows, {\n              eventItems: this.state.eventItems,\n              artistItems: this.state.artistItems,\n              venueItems: this.state.venueItems,\n              optionSelected: this.state.optionSelected\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 17\n          }, this);\n        }\n  }\n\n}\n\nexport default Table;","map":{"version":3,"sources":["C:/Users/Sutto/Documents/react_practice/finished-oll-events/oll-events/oll-events/src/Table.js"],"names":["React","Rows","Table","Component","constructor","state","artistError","isArtistLoaded","artistItems","eventError","isEventLoaded","eventItems","venueError","isVenueLoaded","venueItems","optionSelected","componentDidMount","fetch","then","res","json","result","setState","error","onRadioChange","event","target","value","render","message"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './Table.css';\r\nimport Rows from './Rows.js'; \r\n\r\n//NOTE: I was unable to figure out how to get the date to parse correctly,\r\n// so that is a bug, and it doesn't sort on date\r\nclass Table extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            artistError: null,\r\n            isArtistLoaded: false,\r\n            artistItems: [],\r\n            eventError: null,\r\n            isEventLoaded: false,\r\n            eventItems: [],\r\n            venueError: null,\r\n            isVenueLoaded: null,\r\n            venueItems: [],\r\n            optionSelected: null,\r\n        }\r\n    }\r\n\r\n    // This fetches the JSON data and builds the \r\n    componentDidMount() {\r\n        fetch(\"https://oll-coding-exercise.s3-us-west-2.amazonaws.com/artists.json\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    this.setState({\r\n                        isArtistLoaded: true,\r\n                        artistItems: result,\r\n                    });\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        isArtistLoaded: true,\r\n                        artistError: error,\r\n                    });\r\n                }\r\n            )\r\n\r\n        fetch(\"https://oll-coding-exercise.s3-us-west-2.amazonaws.com/events.json\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    this.setState({\r\n                        isEventLoaded: true,\r\n                        eventItems: result,\r\n                    });\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        isEventLoaded: true,\r\n                        eventError: error,\r\n                    });\r\n                }\r\n            )\r\n\r\n        fetch(\"https://oll-coding-exercise.s3-us-west-2.amazonaws.com/venues.json\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    this.setState({\r\n                        isVenueLoaded: true,\r\n                        venueItems: result,\r\n                    });\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        isVenueLoaded: true,\r\n                        venueError: error,\r\n                    });\r\n                }\r\n            )\r\n\r\n\r\n    }\r\n\r\n    // method keeps track of which radio button is selected\r\n    onRadioChange(event) {\r\n        this.setState({\r\n            optionSelected : event.target.value, \r\n        });\r\n    }\r\n\r\n    render() {\r\n        // if an error occured output corresponding error\r\n        if (this.state.artistError || this.state.eventError || this.state.venueError) {\r\n\r\n            if (this.state.artistError) {\r\n                return <div>Error: {this.state.artistError.message}</div>;\r\n            }\r\n            else if (this.state.eventError) {\r\n                return <div>Error: {this.state.eventError.message}</div>;\r\n            }\r\n            else {\r\n                return <div>Error: {this.state.venueError.message}</div>;\r\n            }\r\n        }\r\n        // if one of the JSON files isn't loaded output loading message\r\n        else if (!this.state.isArtistLoaded || !this.state.isEventLoaded || !this.state.isVenueLoaded) {\r\n            return <div>Loading...</div>;\r\n        }\r\n        // All files loaded, no errors processing normally\r\n        else {\r\n            return (\r\n                <div className=\"Table-Header\">\r\n                    Sort By:\r\n                    <form>\r\n                        <div className=\"radio\">\r\n                            <label>\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    value=\"Artist\"\r\n                                    name=\"sortRadio\"\r\n                                    onChange={(event) => this.onRadioChange(event)}\r\n                                />\r\n                                Artist\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"radio\">\r\n                            <label>\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    value=\"Venue\"\r\n                                    name=\"sortRadio\"\r\n                                    onChange={(event) => this.onRadioChange(event)}\r\n                                />\r\n                                Venue\r\n                            </label>\r\n                        </div>\r\n                    </form>\r\n                        \r\n                        \r\n                        <Rows\r\n                            eventItems={this.state.eventItems}\r\n                            artistItems={this.state.artistItems}\r\n                            venueItems={this.state.venueItems}\r\n                            optionSelected={this.state.optionSelected}\r\n                            />\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Table; "]},"metadata":{},"sourceType":"module"}