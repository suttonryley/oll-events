{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sutto\\\\Documents\\\\react_practice\\\\oll-events\\\\src\\\\Rows.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Rows extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  buildcell(artist, event, venue) {\n    let cells = []; //Build the Table \n\n    cells.push( /*#__PURE__*/_jsxDEV(\"th\", {\n      children: [\" \", event.date]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 20\n    }, this));\n    cells.push( /*#__PURE__*/_jsxDEV(\"th\", {\n      children: event.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 20\n    }, this));\n    cells.push( /*#__PURE__*/_jsxDEV(\"th\", {\n      children: artist.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 20\n    }, this));\n    cells.push( /*#__PURE__*/_jsxDEV(\"th\", {\n      children: artist.genre\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 20\n    }, this));\n    cells.push( /*#__PURE__*/_jsxDEV(\"th\", {\n      children: venue.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 20\n    }, this));\n    cells.push( /*#__PURE__*/_jsxDEV(\"th\", {\n      children: [\"$\", event.price]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 20\n    }, this));\n    return cells;\n  }\n\n  buildTable(rows) {\n    return /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n        id: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Event Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Event Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Artist Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Artist Genre\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Venue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Ticket Price\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }, this), rows]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this);\n  }\n\n  sortByArtist() {\n    let artistNames = [];\n    let rows = []; //put all artists names together\n\n    this.props.artistItems.forEach((element, index) => {\n      artistNames.push(element.name);\n    }); //sort the names by alphabetical order\n\n    artistNames.sort();\n    artistNames.forEach(element => {\n      let cells = []; //find the artist in items\n\n      let artist = this.props.artistItems.find(({\n        name\n      }) => name === element);\n      let events = this.props.eventItems.filter(({\n        artist_id\n      }) => artist_id === artist.id); //there could be more than one event per artist\n\n      events.forEach(event => {\n        let venue = this.props.venueItems.find(({\n          id\n        }) => id === event.venue_id); // build the row\n\n        cells = this.buildcell(artist, event, venue); //set correct id for each row\n\n        let rowID = 'event_' + event.id;\n        rows.push( /*#__PURE__*/_jsxDEV(\"tbody\", {\n          id: rowID,\n          children: cells\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 27\n        }, this));\n      });\n    });\n    return this.buildTable(rows);\n  }\n\n  sortByVenue() {\n    let venueNames = [];\n    let rows = []; //find number of venues through ids \n\n    this.props.venueItems.forEach(element => {\n      venueNames.push(element.name);\n    }); //sort the names by alphabetical order\n\n    venueNames.sort();\n    venueNames.forEach(element => {\n      let cells = []; //find the venue in items\n\n      let venue = this.props.venueItems.find(({\n        name\n      }) => name === element);\n      let events = this.props.eventItems.filter(({\n        venue_id\n      }) => venue_id === venue.id); //there could be more than one event at the same venue\n\n      events.forEach(event => {\n        let artist = this.props.artistItems.find(({\n          id\n        }) => id === event.artist_id); // build the row                \n\n        cells = this.buildcell(artist, event, venue); //set correct id for each row\n\n        let rowID = 'event_' + event.id;\n        rows.push( /*#__PURE__*/_jsxDEV(\"tbody\", {\n          id: rowID,\n          children: cells\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 27\n        }, this));\n      });\n    });\n    return this.buildTable(rows);\n  }\n\n  unSorted() {\n    //for each event\n    let rows = [];\n    this.props.eventItems.forEach(event => {\n      let cells = [];\n      let venue = this.props.venueItems.find(({\n        id\n      }) => id === event.venue_id);\n      let artist = this.props.artistItems.find(({\n        id\n      }) => id === event.artist_id);\n      console.log(event); // build the row                \n      //cells = this.buildcell(artist, event, venue);\n      //set correct id for each row\n\n      let rowID = 'event_' + event.id;\n      rows.push( /*#__PURE__*/_jsxDEV(\"tbody\", {\n        id: rowID,\n        children: cells\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 23\n      }, this));\n    });\n    return this.buildTable(rows);\n  }\n\n  render() {\n    if (this.props.optionSelected === 'Artist') {\n      // Sort by Artist \n      return this.sortByArtist();\n    } else if (this.props.optionSelected === 'Venue') {\n      return this.sortByVenue();\n    } else {\n      return this.unSorted();\n    }\n  }\n\n}\n\nexport default Rows;","map":{"version":3,"sources":["C:/Users/Sutto/Documents/react_practice/oll-events/src/Rows.js"],"names":["React","Rows","Component","constructor","props","buildcell","artist","event","venue","cells","push","date","title","name","genre","price","buildTable","rows","sortByArtist","artistNames","artistItems","forEach","element","index","sort","find","events","eventItems","filter","artist_id","id","venueItems","venue_id","rowID","sortByVenue","venueNames","unSorted","console","log","render","optionSelected"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nclass Rows extends React.Component {\r\n    constructor(props) {\r\n        super(props); \r\n    }\r\n    buildcell(artist, event, venue) {\r\n        let cells = []; \r\n        //Build the Table \r\n        cells.push(<th> {event.date}</th>);\r\n        cells.push(<th>{event.title}</th>);\r\n        cells.push(<th>{artist.name}</th>);\r\n        cells.push(<th>{artist.genre}</th>);\r\n        cells.push(<th>{venue.name}</th>);\r\n        cells.push(<th>${event.price}</th>);\r\n\r\n        return cells; \r\n    }\r\n\r\n    buildTable(rows) {\r\n        return (\r\n            <table>\r\n            <tr id=\"header\">\r\n                <th>Event Date</th>\r\n                <th>Event Name</th>\r\n                <th>Artist Name</th>\r\n                <th>Artist Genre</th>\r\n                <th>Venue</th>\r\n                <th>Ticket Price</th>\r\n            </tr>\r\n            {rows}\r\n        </table>); \r\n    }\r\n    sortByArtist() {\r\n        let artistNames = []; \r\n        let rows = []; \r\n\r\n        //put all artists names together\r\n        this.props.artistItems.forEach((element,index) => {\r\n            artistNames.push(element.name);\r\n        }); \r\n\r\n        //sort the names by alphabetical order\r\n        artistNames.sort(); \r\n\r\n        artistNames.forEach(element => {\r\n\r\n            let cells = []; \r\n\r\n            //find the artist in items\r\n            let artist = this.props.artistItems.find(({ name }) => name === element);\r\n            let events = this.props.eventItems.filter(({ artist_id }) => artist_id === artist.id ); \r\n\r\n            //there could be more than one event per artist\r\n            events.forEach(event => {\r\n                let venue = this.props.venueItems.find(({ id }) => id === event.venue_id);\r\n\r\n                // build the row\r\n                cells = this.buildcell(artist, event, venue);\r\n\r\n                //set correct id for each row\r\n                let rowID = 'event_' + event.id;\r\n                rows.push(<tbody id={rowID}>{cells}</tbody>)\r\n            }); \r\n        }); \r\n        return this.buildTable(rows);             \r\n        \r\n    }\r\n\r\n    sortByVenue() {\r\n        let venueNames = [];\r\n        let rows = [];\r\n\r\n        //find number of venues through ids \r\n        this.props.venueItems.forEach((element) => {\r\n            venueNames.push(element.name);\r\n        });\r\n\r\n        //sort the names by alphabetical order\r\n        venueNames.sort();\r\n\r\n        venueNames.forEach(element => {\r\n\r\n            let cells = [];\r\n\r\n            //find the venue in items\r\n            let venue = this.props.venueItems.find(({ name }) => name === element);\r\n            let events = this.props.eventItems.filter(({ venue_id }) => venue_id === venue.id);\r\n            \r\n\r\n            //there could be more than one event at the same venue\r\n            events.forEach(event => {\r\n                let artist = this.props.artistItems.find(({ id }) => id === event.artist_id);\r\n                                \r\n                // build the row                \r\n                cells = this.buildcell(artist, event, venue);\r\n    \r\n                //set correct id for each row\r\n                let rowID = 'event_' + event.id;\r\n                rows.push(<tbody id={rowID}>{cells}</tbody>)\r\n                    \r\n            }); \r\n        });\r\n        return this.buildTable(rows); \r\n    }\r\n\r\n    unSorted() {\r\n        //for each event\r\n        let rows = [];\r\n\r\n        this.props.eventItems.forEach((event) => {\r\n            let cells = [];\r\n\r\n            let venue = this.props.venueItems.find(({ id }) => id === event.venue_id);\r\n            let artist = this.props.artistItems.find(({ id }) => id === event.artist_id);\r\n            console.log(event);\r\n            // build the row                \r\n            //cells = this.buildcell(artist, event, venue);\r\n\r\n            //set correct id for each row\r\n            let rowID = 'event_' + event.id;\r\n            rows.push(<tbody id={rowID}>{cells}</tbody>)\r\n        }); \r\n\r\n        return this.buildTable(rows); \r\n\r\n  \r\n    }\r\n\r\n    render() {\r\n        if (this.props.optionSelected === 'Artist') {\r\n            // Sort by Artist \r\n            return this.sortByArtist();\r\n        }\r\n        else if (this.props.optionSelected === 'Venue') {\r\n            return this.sortByVenue();\r\n        }\r\n        else {\r\n            return this.unSorted();\r\n        }\r\n    }\r\n     \r\n}\r\n\r\nexport default Rows; "]},"metadata":{},"sourceType":"module"}