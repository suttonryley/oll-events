{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sutto\\\\Documents\\\\react_practice\\\\oll-events\\\\src\\\\Table.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './Table.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Table() {\n  _s();\n\n  const [artistError, setArtistError] = useState(null);\n  const [isArtistLoaded, setIsArtistLoaded] = useState(false);\n  const [artistItems, setArtistItems] = useState([]);\n  const [eventError, setEventError] = useState(null);\n  const [isEventLoaded, setIsEventLoaded] = useState(false);\n  const [eventItems, setEventItems] = useState([]);\n  const [venueError, setVenueError] = useState(null);\n  const [isVenueLoaded, setIsVenueLoaded] = useState(false);\n  const [venueItems, setVenueItems] = useState([]); // This fetches the JSON data and builds the \n\n  useEffect(() => {\n    fetch(\"https://oll-coding-exercise.s3-us-west-2.amazonaws.com/artists.json\").then(res => res.json()).then(result => {\n      setIsArtistLoaded(true);\n      setArtistItems(result);\n    }, error => {\n      setIsArtistLoaded(true);\n      setArtistError(error);\n    });\n    fetch(\"https://oll-coding-exercise.s3-us-west-2.amazonaws.com/events.json\").then(res => res.json()).then(result => {\n      setIsEventLoaded(true);\n      setEventItems(result);\n    }, error => {\n      setIsEventLoaded(true);\n      setEventError(error);\n    });\n    fetch(\"https://oll-coding-exercise.s3-us-west-2.amazonaws.com/venues.json\").then(res => res.json()).then(result => {\n      setIsVenueLoaded(true);\n      setVenueItems(result);\n    }, error => {\n      setIsVenueLoaded(true);\n      setVenueError(error);\n    });\n  }, []);\n  let rows = [];\n  let eventdate = null;\n  let eventName = null;\n  let artistName = null;\n  let artistGenre = null;\n  let venue = null;\n  let ticketPrice = null;\n  let eventItem = eventItems.pop();\n  let artistItem = artistItem.pop();\n  let venueItem = venueItem.pop();\n  let i = 0;\n  let rowID = \"hello\";\n  let cell = [];\n  let cellID = 'event_${eventItem.id}_of_the_event';\n  cell.push( /*#__PURE__*/_jsxDEV(\"td\", {\n    id: cellID,\n    children: eventItem.id\n  }, cellID, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 15\n  }, this));\n  rows.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n    id: rowID,\n    children: cell\n  }, i, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 15\n  }, this));\n\n  if (artistError) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", artistError.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 16\n    }, this);\n  } else if (!isArtistLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 16\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Table-Header\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Event Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Event Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Artist Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Artist Genre\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Venue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Ticket Price\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), artistItems.map((item, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Blank\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: item.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: item.genre\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 29\n          }, this)]\n        }, item.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 29\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(Table, \"AaXxdIvpIJMpbzTOnIBYEJGggK8=\");\n\n_c = Table;\nexport default Table;\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"sources":["C:/Users/Sutto/Documents/react_practice/oll-events/src/Table.js"],"names":["React","useState","useEffect","Table","artistError","setArtistError","isArtistLoaded","setIsArtistLoaded","artistItems","setArtistItems","eventError","setEventError","isEventLoaded","setIsEventLoaded","eventItems","setEventItems","venueError","setVenueError","isVenueLoaded","setIsVenueLoaded","venueItems","setVenueItems","fetch","then","res","json","result","error","rows","eventdate","eventName","artistName","artistGenre","venue","ticketPrice","eventItem","pop","artistItem","venueItem","i","rowID","cell","cellID","push","id","message","map","item","index","name","genre"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Table.css';\r\n\r\nfunction Table() {\r\n    const [artistError, setArtistError] = useState(null);\r\n    const [isArtistLoaded, setIsArtistLoaded] = useState(false);\r\n    const [artistItems, setArtistItems] = useState([]);\r\n    const [eventError, setEventError] = useState(null);\r\n    const [isEventLoaded, setIsEventLoaded] = useState(false);\r\n    const [eventItems, setEventItems] = useState([]);\r\n    const [venueError, setVenueError] = useState(null);\r\n    const [isVenueLoaded, setIsVenueLoaded] = useState(false);\r\n    const [venueItems, setVenueItems] = useState([]);\r\n\r\n    // This fetches the JSON data and builds the \r\n    useEffect(() => {\r\n        fetch(\"https://oll-coding-exercise.s3-us-west-2.amazonaws.com/artists.json\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    setIsArtistLoaded(true);\r\n                    setArtistItems(result);\r\n                },\r\n                (error) => {\r\n                    setIsArtistLoaded(true);\r\n                    setArtistError(error);\r\n                }\r\n        )\r\n\r\n        fetch(\"https://oll-coding-exercise.s3-us-west-2.amazonaws.com/events.json\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    setIsEventLoaded(true);\r\n                    setEventItems(result);\r\n                },\r\n                (error) => {\r\n                    setIsEventLoaded(true);\r\n                    setEventError(error);\r\n                }\r\n        )\r\n\r\n        fetch(\"https://oll-coding-exercise.s3-us-west-2.amazonaws.com/venues.json\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    setIsVenueLoaded(true);\r\n                    setVenueItems(result);\r\n                },\r\n                (error) => {\r\n                    setIsVenueLoaded(true);\r\n                    setVenueError(error);\r\n                }\r\n            )\r\n    }, [])\r\n\r\n    let rows = [];\r\n    let eventdate = null; \r\n    let eventName = null; \r\n    let artistName = null; \r\n    let artistGenre = null; \r\n    let venue = null; \r\n    let ticketPrice = null; \r\n\r\n    let eventItem = eventItems.pop(); \r\n    let artistItem = artistItem.pop(); \r\n    let venueItem = venueItem.pop(); \r\n\r\n    let i = 0; \r\n    let rowID = \"hello\"; \r\n\r\n    let cell = []; \r\n    let cellID = 'event_${eventItem.id}_of_the_event'; \r\n    cell.push(<td key={cellID} id={cellID}>{eventItem.id}</td>);\r\n    rows.push(<tr key={i} id={rowID}>{cell}</tr>); \r\n\r\n    if (artistError) {\r\n        return <div>Error: {artistError.message}</div>;\r\n    } else if (!isArtistLoaded) {\r\n        return <div>Loading...</div>;\r\n    } else {\r\n        return (\r\n            <div className=\"Table-Header\">\r\n                <table >\r\n                    <tr>\r\n                        <th>Event Date</th>\r\n                        <th>Event Name</th>\r\n                        <th>Artist Name</th>\r\n                        <th>Artist Genre</th>\r\n                        <th>Venue</th>\r\n                        <th>Ticket Price</th>\r\n                    </tr>\r\n\r\n                    {artistItems.map((item, index) => (\r\n                            <tr key={item.id}>\r\n                            <th></th>\r\n                            <th>Blank</th>\r\n                            <th>{item.name}</th>\r\n                            <th>{item.genre}</th>\r\n                            </tr>\r\n                        ))}\r\n\r\n                </table>\r\n            </div>\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Table; "]},"metadata":{},"sourceType":"module"}